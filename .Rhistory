dplyr::filter(endmonth >= beginwindow & endmonth < endwindow) %>%
dplyr::mutate(churnind = ifelse(lead == 'churn', 1, 0)) %>%
dplyr::group_by(marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket) %>%
dplyr::summarise(numobs = length(customerid), churned = sum(churnind)) %>%
dplyr::ungroup() %>%
dplyr::mutate(churn = churned / numobs,
renewrate = 1 - churn,
monthchurn = 1 - renewrate ^ (1/as.double(months)),
logmonthchurn = log(monthchurn),
weight = numobs / sum(numobs)) %>%
# NB! Does this introduce a bad bias ????
dplyr::filter(churn != 0)
new_model=glm(logmonthchurn~marketcat+churncatnomarket, data=churntable, weights = churntable$weight)
summary(new_model)
anova(new_model, test="Chisq")
predictions <- churntable
predictions$predictlogmonthchurn <- predict(new_model, type="response")
predictions <- predictions %>% dplyr::mutate(predictmonthchurn = exp(predictlogmonthchurn))
tblpred <- predictions %>%
dplyr::select(marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket, monthchurn, predictmonthchurn)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
# some configuration
SLIMDATA <- T
slimfactor <- 0.1
periodendcutoff <- parse_date_time('2017-01-01', 'ymd')
beginwindow <- parse_date_time('2017-09-01', 'ymd')
endwindow <- parse_date_time('2018-01-01', 'ymd')
library(lubridate)
library(dplyr)
library(ggplot2)
library(caret)
library(dplyr)
library(DT)
source('bizlogic.R')
if (!exists('customersorg'))
{
customersorg <- read.table(file = 'data/CustomersV2.export.tsv', sep = '\t', header = TRUE, stringsAsFactors = F)
gdp <- read.table(file = 'data/gdp-simple.export.tsv', sep = '\t', header = TRUE, stringsAsFactors=F)
colnames(gdp)<-c('marketname', 'gdppercapita')
subsorg <- read.table(file = 'data/SubscriptionsV2.export.tsv', sep = '\t', header = TRUE,
stringsAsFactors=F)
}
if (SLIMDATA)
{
set.seed(1)
index <- caret::createDataPartition(customersorg$customerid, p = slimfactor, list = FALSE, times = 1)
customers <- customersorg[index,]
custids <- customers %>% dplyr::select(customerid)
subs <- subsorg %>% dplyr::inner_join(custids, by = 'customerid')
} else {
customers <- customersorg
subs <- subsorg
}
subs$periodend<-as.Date(subs$periodend)
subs$startmonth<-as.Date(subs$startmonth)
subs$endmonth<-as.Date(subs$endmonth)
subs$startmonth<-ymd(subs$startmonth)
subs$endmonth<-ymd(subs$endmonth)
# Create the months variable
subs$months=(year(subs$endmonth)-year(subs$startmonth))*12+
(month(subs$endmonth)-month(subs$startmonth))
x1 <- unique(subs$customerid[!(subs$months %in% c(1,3,12,24))])
# period starts after march 2018
x2 <- unique(subs$customerid[subs$startmonth>'2018-03-01'])
x3<-unique(c(x1,x2))
rm(x1);rm(x2)
# Subsetting the data
subs1<- subs[!(subs$customerid%in% x3),]
# Removing variables
subs1$periodstart<-NULL
subs1$periodend<-NULL
subs1$billingcurrency<-factor(subs1$billingcurrency)
## Sorting by ID and date
subs1$One<-1 ## We need this for later
subs1$months1<-subs1$months
subs1$months<-as.character(subs1$months)
#subs2<-subs1[1:25000,]
subs1<-subs1 %>%
arrange(customerid, startmonth) %>%
group_by(customerid) %>%
# Take the last row for each customerid, duplicate it
filter(row_number()==n()) %>%
#mutate(months = as.character(months)) %>%
mutate(months = ifelse(endmonth<'2018-03-01', 'churn', 'active')) %>%
#We need this for sorting later
mutate(subscriptionid=subscriptionid+0.001)%>%
bind_rows(subs1)%>%
arrange(customerid, subscriptionid) %>%
# Total months and number of subscriptions before the given state/event
mutate(months_total=lag(cumsum(months1), n=1, default=0), times = dplyr::lag(cumsum(One), n=1, default=0)) %>%
# previous subs type, 0, if this if first
mutate(lag = dplyr::lag(months, n=1, default='0'))
subs1 <- subs1 %>%
mutate(lead = dplyr::lead(months, n=1))
subs1$months1<-NULL
subs1$One<-NULL
# get rid of dplyr dataframe structure
subs1<-as.data.frame(subs1)
# take out actives
subs1<-subs1[subs1$months !='active',]
subs1$months<-factor(subs1$months, levels=c('1','3','12', '24', 'churn'),
labels=c('1','3','12', '24',  'churn'))
subs1$lag<-factor(subs1$lag, levels = c('0','1','3','12', '24'),
labels = c(c('0','1','3','12', '24')))
subs1$lead<-factor(subs1$lead, levels = c('churn','1','3','12', '24'),
labels = c(c('churn','1','3','12', '24')))
# joining with customers
subs2<-plyr::join(subs1, customers, by='customerid', type='left', match='all')
# Joining with gdp data
subs2<-plyr::join(subs2, gdp, by='marketname', type='left', match='all')
subs2$isfreemium<-factor(subs2$isfreemium, levels=c(0,1), labels=c('No', 'Yes'))
subs2$segment<-factor(subs2$segment)
subs2$productversion<-factor(subs2$productversion)
subs2$isquickpurchase<-factor(subs2$isquickpurchase, levels=c(0,1), labels=c('No', 'Yes'))
subs2$firstdevice<-factor(subs2$firstdevice)
subs2$marketname <- factor(subs2$marketname)
subs2$model31224 <- factor(subs2$model31224)
subs2$channelcat <- factor(subs2$channelcat)
subs2$siteverkey <- factor(subs2$siteverkey)
subs2$currency <- factor(subs2$currency)
## Scale gdp data
gdpsc<-as.vector(scale(subs2$gdppercapita, center=T, scale=T))
subs2$gdppercapita<-gdpsc
subs3 <- subs2 %>% dplyr::filter(endmonth >= periodendcutoff)
tmp <- subs3 %>%
addSiteVerCats() %>%
addAgeAtStartCatsChurn() %>%
addSiteVerKeyCatChurn()
subs4 <- subs3 %>%
addChurnCatsEtc()
summary(subs4)
churntable <- subs4 %>%
# remove synthetic "next" event
dplyr::filter(months != 'churn') %>%
# restrict to a recent expiry window
dplyr::filter(endmonth >= beginwindow & endmonth < endwindow) %>%
dplyr::mutate(churnind = ifelse(lead == 'churn', 1, 0)) %>%
dplyr::group_by(marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket) %>%
dplyr::summarise(numobs = length(customerid), churned = sum(churnind)) %>%
dplyr::ungroup() %>%
dplyr::mutate(churn = churned / numobs,
renewrate = 1 - churn,
monthchurn = 1 - renewrate ^ (1/as.double(months)),
logmonthchurn = log(monthchurn),
weight = numobs / sum(numobs)) %>%
# NB! Does this introduce a bad bias ????
dplyr::filter(churn != 0)
new_model=glm(logmonthchurn~marketcat+churncatnomarket, data=churntable, weights = churntable$weight)
summary(new_model)
anova(new_model, test="Chisq")
predictions <- churntable
predictions$predictlogmonthchurn <- predict(new_model, type="response")
predictions <- predictions %>% dplyr::mutate(predictmonthchurn = exp(predictlogmonthchurn))
tblpred <- predictions %>%
dplyr::select(marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket, monthchurn, predictmonthchurn)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
plot3mhistory <- function(market, pred)
{
tmp <- pred %>%
dplyr::filter(marketcat == market &
(custchosensubslengthcatchurn == 3 | custchosensubslengthcatchurn == "gen" ) &
((months == 3  & ageatstartcatchurn > 0) | (months == 1 & ageatstartcatchurn == 0))) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
tmp %>%
ggplot(aes(x=ageatstartcatchurn, y=value, color=variable)) + geom_line() + geom_point() + ggtitle(market)
}
plot3mhistory("DK", predictions)
plot3mhistory("NO", predictions)
plot3mhistory("SE", predictions)
plot3mhistory("US", predictions)
plot3mhistory("FR", predictions)
plot3mhistory("GB", predictions)
tblpred <- predictions %>%
dplyr::select(siteverkeycat, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket, monthchurn, predictmonthchurn)
View(predictions)
churntable <- subs4 %>%
# remove synthetic "next" event
dplyr::filter(months != 'churn') %>%
# restrict to a recent expiry window
dplyr::filter(endmonth >= beginwindow & endmonth < endwindow) %>%
dplyr::mutate(churnind = ifelse(lead == 'churn', 1, 0)) %>%
dplyr::group_by(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket) %>%
dplyr::summarise(numobs = length(customerid), churned = sum(churnind)) %>%
dplyr::ungroup() %>%
dplyr::mutate(churn = churned / numobs,
renewrate = 1 - churn,
monthchurn = 1 - renewrate ^ (1/as.double(months)),
logmonthchurn = log(monthchurn),
weight = numobs / sum(numobs)) %>%
# NB! Does this introduce a bad bias ????
dplyr::filter(churn != 0)
View(churntable)
churntable <- subs4 %>%
# remove synthetic "next" event
dplyr::filter(months != 'churn') %>%
# restrict to a recent expiry window
dplyr::filter(endmonth >= beginwindow & endmonth < endwindow) %>%
dplyr::mutate(churnind = ifelse(lead == 'churn', 1, 0)) %>%
dplyr::group_by(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket) %>%
dplyr::summarise(numobs = length(customerid), churned = sum(churnind)) %>%
dplyr::ungroup() %>%
dplyr::mutate(churn = churned / numobs,
renewrate = 1 - churn,
monthchurn = 1 - renewrate ^ (1/as.double(months)),
logmonthchurn = log(monthchurn),
weight = numobs / sum(numobs)) %>%
# NB! Does this introduce a bad bias ????
dplyr::filter(churn != 0)
new_model=glm(logmonthchurn~marketcat+churncatnomarket, data=churntable, weights = churntable$weight)
summary(new_model)
anova(new_model, test="Chisq")
tblpred <- predictions %>%
dplyr::select(siteverkeycat, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket, monthchurn, predictmonthchurn)
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket, monthchurn, predictmonthchurn)
churntable <- subs4 %>%
# remove synthetic "next" event
dplyr::filter(months != 'churn') %>%
# restrict to a recent expiry window
dplyr::filter(endmonth >= beginwindow & endmonth < endwindow) %>%
dplyr::mutate(churnind = ifelse(lead == 'churn', 1, 0)) %>%
dplyr::group_by(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket) %>%
dplyr::summarise(numobs = length(customerid), churned = sum(churnind)) %>%
dplyr::ungroup() %>%
dplyr::mutate(churn = churned / numobs,
renewrate = 1 - churn,
monthchurn = 1 - renewrate ^ (1/as.double(months)),
logmonthchurn = log(monthchurn),
weight = numobs / sum(numobs)) %>%
# NB! Does this introduce a bad bias ????
dplyr::filter(churn != 0)
new_model=glm(logmonthchurn~marketcat+churncatnomarket, data=churntable, weights = churntable$weight)
new_model=glm(logmonthchurn~marketcat+churncatnomarket, data=churntable, weights = churntable$weight)
predictions <- churntable
predictions$predictlogmonthchurn <- predict(new_model, type="response")
predictions <- predictions %>% dplyr::mutate(predictmonthchurn = exp(predictlogmonthchurn))
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket, monthchurn, predictmonthchurn)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn,
churncatnomarket, monthchurn, predictmonthchurn) %>%
dplyr::arrange(marketcat, ageatstartcatchurn, months, custchosensubslengthcatchurn, siteverkeycatchurn)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months,
churncatnomarket, monthchurn, predictmonthchurn) %>%
dplyr::arrange(marketcat, ageatstartcatchurn, months, custchosensubslengthcatchurn, siteverkeycatchurn)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months,
churncatnomarket, monthchurn, predictmonthchurn) %>%
dplyr::arrange(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months, churncatnomarket)
tmp <- pred %>%
dplyr::filter(marketcat == "US" &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 1 & months == 3 & custchosensubslengthcatchurn == 'gen')
)
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
tmp <- predictions %>%
dplyr::filter(marketcat == "US" &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 1 & months == 3 & custchosensubslengthcatchurn == 'gen')
)
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
View(tmp)
tmp <- predictions %>%
dplyr::filter(marketcat == "US" &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 0 & months == 3 & custchosensubslengthcatchurn == 'gen')
)
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
View(tmp)
plot3mhistory <- function(market, pred)
{
tmp <- pred %>%
dplyr::filter(marketcat == market &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 0 & months == 3 & custchosensubslengthcatchurn == 'gen')
)
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
tmp %>%
ggplot(aes(x=ageatstartcatchurn, y=value, color=variable)) + geom_line() + geom_point() + ggtitle(market)
}
plot3mhistory("US", predictions)
plot3mhistory("DK", predictions)
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months,
churncatnomarket, monthchurn, predictmonthchurn) %>%
dplyr::arrange(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months, churncatnomarket)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
plot3mhistory("DK", predictions)
plot3mhistory <- function(market, pred)
{
tmp <- pred %>%
dplyr::filter(marketcat == market &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 0 & months == 3 & custchosensubslengthcatchurn == 'gen')
) &
siteverkeycat != "ORG"
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
tmp %>%
ggplot(aes(x=ageatstartcatchurn, y=value, color=variable)) + geom_line() + geom_point() + ggtitle(market)
}
plot3mhistory("DK", predictions)
plot3mhistory <- function(market, pred)
{
tmp <- pred %>%
dplyr::filter(marketcat == market &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 0 & months == 3 & custchosensubslengthcatchurn == 'gen')
) &
siteverkeycatchurn != "ORG"
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
tmp %>%
ggplot(aes(x=ageatstartcatchurn, y=value, color=variable)) + geom_line() + geom_point() + ggtitle(market)
}
plot3mhistory("DK", predictions)
plot3mhistory("DK", predictions)
plot3mhistory("NO", predictions)
plot3mhistory("SE", predictions)
plot3mhistory("US", predictions)
plot3mhistory("FR", predictions)
plot3mhistory("GB", predictions)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F)
# some configuration
SLIMDATA <- T
slimfactor <- 1.0
periodendcutoff <- parse_date_time('2017-01-01', 'ymd')
beginwindow <- parse_date_time('2017-09-01', 'ymd')
endwindow <- parse_date_time('2018-01-01', 'ymd')
library(lubridate)
library(dplyr)
library(ggplot2)
library(caret)
library(dplyr)
library(DT)
source('bizlogic.R')
if (!exists('customersorg'))
{
# don't read again, we've already got it
customersorg <- read.table(file = 'data/CustomersV2.export.tsv', sep = '\t', header = TRUE, stringsAsFactors = F)
gdp <- read.table(file = 'data/gdp-simple.export.tsv', sep = '\t', header = TRUE, stringsAsFactors=F)
colnames(gdp)<-c('marketname', 'gdppercapita')
subsorg <- read.table(file = 'data/SubscriptionsV2.export.tsv', sep = '\t', header = TRUE,
stringsAsFactors=F)
}
if (SLIMDATA)
{
set.seed(1)
index <- caret::createDataPartition(customersorg$customerid, p = slimfactor, list = FALSE, times = 1)
customers <- customersorg[index,]
custids <- customers %>% dplyr::select(customerid)
subs <- subsorg %>% dplyr::inner_join(custids, by = 'customerid')
} else {
customers <- customersorg
subs <- subsorg
}
subs$periodend<-as.Date(subs$periodend)
subs$startmonth<-as.Date(subs$startmonth)
subs$endmonth<-as.Date(subs$endmonth)
subs$startmonth<-ymd(subs$startmonth)
subs$endmonth<-ymd(subs$endmonth)
# Create the months variable
subs$months=(year(subs$endmonth)-year(subs$startmonth))*12+
(month(subs$endmonth)-month(subs$startmonth))
x1 <- unique(subs$customerid[!(subs$months %in% c(1,3,12,24))])
# period starts after march 2018
x2 <- unique(subs$customerid[subs$startmonth>'2018-03-01'])
x3<-unique(c(x1,x2))
rm(x1);rm(x2)
# Subsetting the data
subs1<- subs[!(subs$customerid%in% x3),]
# Removing variables
subs1$periodstart<-NULL
subs1$periodend<-NULL
subs1$billingcurrency<-factor(subs1$billingcurrency)
## Sorting by ID and date
subs1$One<-1 ## We need this for later
subs1$months1<-subs1$months
subs1$months<-as.character(subs1$months)
#subs2<-subs1[1:25000,]
subs1<-subs1 %>%
arrange(customerid, startmonth) %>%
group_by(customerid) %>%
# Take the last row for each customerid, duplicate it
filter(row_number()==n()) %>%
#mutate(months = as.character(months)) %>%
mutate(months = ifelse(endmonth<'2018-03-01', 'churn', 'active')) %>%
#We need this for sorting later
mutate(subscriptionid=subscriptionid+0.001)%>%
bind_rows(subs1)%>%
arrange(customerid, subscriptionid) %>%
# Total months and number of subscriptions before the given state/event
mutate(months_total=lag(cumsum(months1), n=1, default=0), times = dplyr::lag(cumsum(One), n=1, default=0)) %>%
# previous subs type, 0, if this if first
mutate(lag = dplyr::lag(months, n=1, default='0'))
subs1 <- subs1 %>%
mutate(lead = dplyr::lead(months, n=1))
subs1$months1<-NULL
subs1$One<-NULL
# get rid of dplyr dataframe structure
subs1<-as.data.frame(subs1)
# take out actives
subs1<-subs1[subs1$months !='active',]
subs1$months<-factor(subs1$months, levels=c('1','3','12', '24', 'churn'),
labels=c('1','3','12', '24',  'churn'))
subs1$lag<-factor(subs1$lag, levels = c('0','1','3','12', '24'),
labels = c(c('0','1','3','12', '24')))
subs1$lead<-factor(subs1$lead, levels = c('churn','1','3','12', '24'),
labels = c(c('churn','1','3','12', '24')))
# joining with customers
subs2<-plyr::join(subs1, customers, by='customerid', type='left', match='all')
# Joining with gdp data
subs2<-plyr::join(subs2, gdp, by='marketname', type='left', match='all')
subs2$isfreemium<-factor(subs2$isfreemium, levels=c(0,1), labels=c('No', 'Yes'))
subs2$segment<-factor(subs2$segment)
subs2$productversion<-factor(subs2$productversion)
subs2$isquickpurchase<-factor(subs2$isquickpurchase, levels=c(0,1), labels=c('No', 'Yes'))
subs2$firstdevice<-factor(subs2$firstdevice)
subs2$marketname <- factor(subs2$marketname)
subs2$model31224 <- factor(subs2$model31224)
subs2$channelcat <- factor(subs2$channelcat)
subs2$siteverkey <- factor(subs2$siteverkey)
subs2$currency <- factor(subs2$currency)
## Scale gdp data
gdpsc<-as.vector(scale(subs2$gdppercapita, center=T, scale=T))
subs2$gdppercapita<-gdpsc
subs3 <- subs2 %>% dplyr::filter(endmonth >= periodendcutoff)
tmp <- subs3 %>%
addSiteVerCats() %>%
addAgeAtStartCatsChurn() %>%
addSiteVerKeyCatChurn()
subs4 <- subs3 %>%
addChurnCatsEtc()
summary(subs4)
churntable <- subs4 %>%
# remove synthetic "next" event
dplyr::filter(months != 'churn') %>%
# restrict to a recent expiry window
dplyr::filter(endmonth >= beginwindow & endmonth < endwindow) %>%
dplyr::mutate(churnind = ifelse(lead == 'churn', 1, 0)) %>%
dplyr::group_by(siteverkeycatchurn, marketcat, months, ageatstartcatchurn, custchosensubslengthcatchurn, churncatnomarket) %>%
dplyr::summarise(numobs = length(customerid), churned = sum(churnind)) %>%
dplyr::ungroup() %>%
dplyr::mutate(churn = churned / numobs,
renewrate = 1 - churn,
monthchurn = 1 - renewrate ^ (1/as.double(months)),
logmonthchurn = log(monthchurn),
weight = numobs / sum(numobs)) %>%
# NB! Does this introduce a bad bias ????
dplyr::filter(churn != 0)
new_model=glm(logmonthchurn~marketcat+churncatnomarket, data=churntable, weights = churntable$weight)
summary(new_model)
anova(new_model, test="Chisq")
predictions <- churntable
predictions$predictlogmonthchurn <- predict(new_model, type="response")
predictions <- predictions %>% dplyr::mutate(predictmonthchurn = exp(predictlogmonthchurn))
tblpred <- predictions %>%
dplyr::select(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months,
churncatnomarket, monthchurn, predictmonthchurn) %>%
dplyr::arrange(siteverkeycatchurn, marketcat, ageatstartcatchurn, custchosensubslengthcatchurn, months, churncatnomarket)
DT::datatable(tblpred, options = list(pageLength = 1000), rownames = FALSE, filter = 'top') %>%formatRound( columns=c(6,7), digits=3)
plot3mhistory <- function(market, pred)
{
tmp <- pred %>%
dplyr::filter(marketcat == market &
(
(ageatstartcatchurn == 0 & months == 1 & custchosensubslengthcatchurn == 3) |
(ageatstartcatchurn != 0 & months == 3 & custchosensubslengthcatchurn == 'gen')
) &
siteverkeycatchurn != "ORG"
) %>%
dplyr::select(ageatstartcatchurn, monthchurn, predictmonthchurn) %>%
tidyr::gather(key = variable, value = value, -ageatstartcatchurn) %>%
dplyr::arrange(ageatstartcatchurn)
tmp %>%
ggplot(aes(x=ageatstartcatchurn, y=value, color=variable)) + geom_line() + geom_point() + ggtitle(market)
}
plot3mhistory("DK", predictions)
plot3mhistory("NO", predictions)
plot3mhistory("SE", predictions)
plot3mhistory("US", predictions)
plot3mhistory("FR", predictions)
plot3mhistory("GB", predictions)
